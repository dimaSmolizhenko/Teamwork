//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Web.Mvc;

namespace SVTrade.Models
{
    using System;
    using System.Collections.Generic;
    
    public partial class User
    {
        public User()
        {
            this.Article = new HashSet<Article>();
            this.ChoosedCategory = new HashSet<ChoosedCategory>();
            this.Order = new HashSet<Order>();
            this.Product = new HashSet<Product>();
            this.ProductToBuy = new HashSet<ProductToBuy>();
            this.ReservedProduct = new HashSet<ReservedProduct>();
            this.ShowedProduct = new HashSet<ShowedProduct>();
        }

        [HiddenInput(DisplayValue = false)]
        public int userID { get; set; }

        [HiddenInput(DisplayValue = false)]
        [DisplayName("Пароль")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string password { get; set; }

        [DisplayName("Посада")]
        [Required(ErrorMessage = "Оберіть посаду")]
        public int userGroupID { get; set; }

        [DisplayName("Компанія")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string companyName { get; set; }

        [DisplayName("Юридична адреса")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string juridicalAddress { get; set; }

        [DisplayName("Адреса")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string address { get; set; }

        [DisplayName("Персональні дані")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string contactPerson { get; set; }

        [DisplayName("Посада в фірмі")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string post { get; set; }

        [DisplayName("Номер телефону")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        public string phoneNumber { get; set; }

        [DisplayName("E-mail")]
        [Required(ErrorMessage = "Поле не може бути пустим")]
        [RegularExpression(@"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}", ErrorMessage = "Некоректна адреса")]
        public string email { get; set; }

        [DisplayName("Ліцензія на продаж")]
        public bool merchantLicense { get; set; }

        [DisplayName("Ліцензія на покупку")]
        public bool tradeLicense { get; set; }

        [DisplayName("Підтвердження")]
        public bool approved { get; set; }

        [HiddenInput(DisplayValue = false)]
        [DisplayName("Строка шифрування паролю")]
        public string passwordSalt { get; set; }
    
        public virtual ICollection<Article> Article { get; set; }
        public virtual ICollection<ChoosedCategory> ChoosedCategory { get; set; }
        public virtual ICollection<Order> Order { get; set; }
        public virtual ICollection<Product> Product { get; set; }
        public virtual ICollection<ProductToBuy> ProductToBuy { get; set; }
        public virtual ICollection<ReservedProduct> ReservedProduct { get; set; }
        public virtual ICollection<ShowedProduct> ShowedProduct { get; set; }
        public virtual UserGroup UserGroup { get; set; }
        public override bool Equals(object obj)  //Перегрузка метода 
        {
            // If parameter is null return false:
            if (obj == null)
                return false;
            else
            {
                // Return true if the fields match:
                User userA = (User)obj;
                return (userID == userA.userID);
            }
        }
        public bool Equals(User a)
        {
            // If parameter is null return false:
            if ((object)a == null)
                return false;
            else
            {
                // Return true if the fields match:
                return (userID == a.userID);
            }
        }

        public override int GetHashCode()
        {
            return this.userID.GetHashCode();
        }

    }
}
